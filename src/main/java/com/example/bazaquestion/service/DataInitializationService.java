package com.example.bazaquestion.service;

import com.example.bazaquestion.model.Question;
import com.example.bazaquestion.model.Subtopic;
import com.example.bazaquestion.model.Topic;
import com.example.bazaquestion.model.User;
import com.example.bazaquestion.repository.QuestionRepository;
import com.example.bazaquestion.repository.SubtopicRepository;
import com.example.bazaquestion.repository.TopicRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Arrays;
import java.util.List;

@Service
@RequiredArgsConstructor
@Slf4j
public class DataInitializationService implements CommandLineRunner {

    private final TopicRepository topicRepository;
    private final SubtopicRepository subtopicRepository;
    private final QuestionRepository questionRepository;
    private final AuthService authService;

    @Override
    @Transactional
    public void run(String... args) throws Exception {
        // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (authService.getAllUsers().isEmpty()) {
            authService.createDefaultAdminUser();
        }
        
        if (topicRepository.count() == 0) {
            log.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...");
            initializeData();
            log.info("–ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã");
        }
    }

    private void initializeData() {
        // –°–æ–∑–¥–∞–µ–º —Ç–µ–º—ã
        Topic javaCore = createTopic("Java Core", "‚òï");
        Topic springCore = createTopic("Spring Core", "üå±");
        Topic kafka = createTopic("Kafka", "üì®");
        Topic postgresql = createTopic("PostgreSQL", "üêò");
        Topic grpc = createTopic("gRPC", "üîó");

        // Java Core –ø–æ–¥—Ç–µ–º—ã
        Subtopic collections = createSubtopic("Collections", javaCore);
        Subtopic streams = createSubtopic("Streams", javaCore);
        Subtopic interfaces = createSubtopic("Interfaces", javaCore);

        // Spring Core –ø–æ–¥—Ç–µ–º—ã
        Subtopic dependencyInjection = createSubtopic("Dependency Injection", springCore);
        Subtopic beanLifecycle = createSubtopic("Bean Lifecycle", springCore);

        // Kafka –ø–æ–¥—Ç–µ–º—ã
        Subtopic kafkaBasics = createSubtopic("Basics", kafka);

        // PostgreSQL –ø–æ–¥—Ç–µ–º—ã
        Subtopic postgresqlIndexes = createSubtopic("Indexes", postgresql);

        // gRPC –ø–æ–¥—Ç–µ–º—ã
        Subtopic grpcProtocolBuffers = createSubtopic("Protocol Buffers", grpc);

        // –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
        createJavaCoreQuestions(collections, streams, interfaces);
        createSpringCoreQuestions(dependencyInjection, beanLifecycle);
        createKafkaQuestions(kafkaBasics);
        createPostgreSQLQuestions(postgresqlIndexes);
        createGRPCQuestions(grpcProtocolBuffers);
    }

    private Topic createTopic(String name, String icon) {
        Topic topic = new Topic();
        topic.setName(name);
        topic.setIcon(icon);
        return topicRepository.save(topic);
    }

    private Subtopic createSubtopic(String name, Topic topic) {
        Subtopic subtopic = new Subtopic();
        subtopic.setName(name);
        subtopic.setTopic(topic);
        return subtopicRepository.save(subtopic);
    }

    private void createJavaCoreQuestions(Subtopic collections, Subtopic streams, Subtopic interfaces) {
        // Collections –≤–æ–ø—Ä–æ—Å—ã
        createQuestion(collections, 
            "–ß—Ç–æ —Ç–∞–∫–æ–µ ArrayList –∏ –∫–∞–∫ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç?",
            "ArrayList - —ç—Ç–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –º–∞—Å—Å–∏–≤, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å —Ä–∞–∑–º–µ—Ä –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.",
            "ArrayList - —ç—Ç–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ List –≤ Java, –æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –Ω–∞ –º–∞—Å—Å–∏–≤–µ. –û–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å–≤–æ–π —Ä–∞–∑–º–µ—Ä –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–∞—Å—Å–∏–≤ Object[] –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Ä–∞–∑–º–µ—Ä–æ–º –≤ 1.5 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ.",
            "List<String> list = new ArrayList<>();\nlist.add(\"Hello\");\nlist.add(\"World\");\nSystem.out.println(list.get(0)); // Hello"
        );

        createQuestion(collections,
            "–í —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É ArrayList –∏ LinkedList?",
            "ArrayList –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–∞—Å—Å–∏–≤, LinkedList - –¥–≤—É—Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫.",
            "ArrayList –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –ø–æ –∏–Ω–¥–µ–∫—Å—É O(1), –Ω–æ –º–µ–¥–ª–µ–Ω–Ω—ã–µ –≤—Å—Ç–∞–≤–∫–∏/—É–¥–∞–ª–µ–Ω–∏—è –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ O(n). LinkedList –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–µ –≤—Å—Ç–∞–≤–∫–∏/—É–¥–∞–ª–µ–Ω–∏—è O(1), –Ω–æ –º–µ–¥–ª–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –ø–æ –∏–Ω–¥–µ–∫—Å—É O(n).",
            "// ArrayList - –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø\nList<String> arrayList = new ArrayList<>();\nString item = arrayList.get(100); // O(1)\n\n// LinkedList - –±—ã—Å—Ç—Ä—ã–µ –≤—Å—Ç–∞–≤–∫–∏\nList<String> linkedList = new LinkedList<>();\nlinkedList.add(0, \"First\"); // O(1)"
        );

        // Streams –≤–æ–ø—Ä–æ—Å—ã
        createQuestion(streams,
            "–ß—Ç–æ —Ç–∞–∫–æ–µ Stream API –≤ Java?",
            "Stream API - —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–ª–µ–∫—Ü–∏–π –¥–∞–Ω–Ω—ã—Ö.",
            "Stream API –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ –¥–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω–æ–º —Å—Ç–∏–ª–µ, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∫–∞–∫ map, filter, reduce. Streams –ª–µ–Ω–∏–≤—ã–µ - –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –¥–æ –≤—ã–∑–æ–≤–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.",
            "List<String> names = Arrays.asList(\"John\", \"Jane\", \"Jack\");\nList<String> result = names.stream()\n    .filter(name -> name.startsWith(\"J\"))\n    .map(String::toUpperCase)\n    .collect(Collectors.toList());"
        );

        // Interfaces –≤–æ–ø—Ä–æ—Å—ã
        createQuestion(interfaces,
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ Java?",
            "–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å - —ç—Ç–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–µ–Ω —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–ª–∞—Å—Å.",
            "–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ Java - —ç—Ç–æ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π —Ç–∏–ø, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–±–æ—Ä –º–µ—Ç–æ–¥–æ–≤ –±–µ–∑ –∏—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏. –ö–ª–∞—Å—Å –º–æ–∂–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤. –° Java 8 –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å default –∏ static –º–µ—Ç–æ–¥—ã.",
            "interface Drawable {\n    void draw();\n    \n    default void print() {\n        System.out.println(\"Printing...\");\n    }\n}\n\nclass Circle implements Drawable {\n    public void draw() {\n        System.out.println(\"Drawing circle\");\n    }\n}"
        );
    }

    private void createSpringCoreQuestions(Subtopic dependencyInjection, Subtopic beanLifecycle) {
        createQuestion(dependencyInjection,
            "–ß—Ç–æ —Ç–∞–∫–æ–µ Dependency Injection?",
            "DI - —ç—Ç–æ –ø–∞—Ç—Ç–µ—Ä–Ω, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –∏–∑–≤–Ω–µ.",
            "Dependency Injection - —ç—Ç–æ —Ç–µ—Ö–Ω–∏–∫–∞, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π –æ–±—ä–µ–∫—Ç –ø–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞, –∞ –Ω–µ —Å–æ–∑–¥–∞–µ—Ç –∏—Ö —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ. –≠—Ç–æ —É–ª—É—á—à–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å –∏ —Å–ª–∞–±—É—é —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.",
            "@Service\npublic class UserService {\n    private final UserRepository userRepository;\n    \n    public UserService(UserRepository userRepository) {\n        this.userRepository = userRepository;\n    }\n}"
        );

        createQuestion(beanLifecycle,
            "–ö–∞–∫–æ–≤ –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª Spring Bean?",
            "Bean –ø—Ä–æ—Ö–æ–¥–∏—Ç —ç—Ç–∞–ø—ã: —Å–æ–∑–¥–∞–Ω–∏–µ, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ.",
            "–ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª Spring Bean –≤–∫–ª—é—á–∞–µ—Ç: 1) –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞, 2) –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤–æ–π—Å—Ç–≤, 3) BeanNameAware, 4) BeanFactoryAware, 5) ApplicationContextAware, 6) BeanPostProcessor.postProcessBeforeInitialization, 7) @PostConstruct, 8) InitializingBean.afterPropertiesSet, 9) init-method, 10) BeanPostProcessor.postProcessAfterInitialization.",
            "@Component\npublic class MyBean {\n    @PostConstruct\n    public void init() {\n        System.out.println(\"Bean initialized\");\n    }\n    \n    @PreDestroy\n    public void cleanup() {\n        System.out.println(\"Bean destroyed\");\n    }\n}"
        );
    }

    private void createKafkaQuestions(Subtopic kafkaBasics) {
        createQuestion(kafkaBasics,
            "–ß—Ç–æ —Ç–∞–∫–æ–µ Apache Kafka?",
            "Kafka - —ç—Ç–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.",
            "Apache Kafka - —ç—Ç–æ –≤—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±–º–µ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –º–∏–ª–ª–∏–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –û–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥–µ–ª—å publish-subscribe –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ.",
            "// Producer\nProperties props = new Properties();\nprops.put(\"bootstrap.servers\", \"localhost:9092\");\nprops.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\nprops.put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n\nProducer<String, String> producer = new KafkaProducer<>(props);\nproducer.send(new ProducerRecord<>(\"my-topic\", \"key\", \"value\"));"
        );
    }

    private void createPostgreSQLQuestions(Subtopic postgresqlIndexes) {
        createQuestion(postgresqlIndexes,
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –∏–Ω–¥–µ–∫—Å—ã –≤ PostgreSQL?",
            "–ò–Ω–¥–µ–∫—Å—ã - —ç—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö.",
            "–ò–Ω–¥–µ–∫—Å—ã –≤ PostgreSQL - —ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —É–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ. –û–Ω–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É—Å–∫–æ—Ä—è—é—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ SELECT, –Ω–æ –∑–∞–º–µ–¥–ª—è—é—Ç INSERT/UPDATE/DELETE.",
            "-- –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞\nCREATE INDEX idx_user_email ON users(email);\n\n-- –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å\nCREATE UNIQUE INDEX idx_user_username ON users(username);\n\n-- –°–æ—Å—Ç–∞–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å\nCREATE INDEX idx_user_name_age ON users(first_name, age);"
        );
    }

    private void createGRPCQuestions(Subtopic grpcProtocolBuffers) {
        createQuestion(grpcProtocolBuffers,
            "–ß—Ç–æ —Ç–∞–∫–æ–µ Protocol Buffers?",
            "Protocol Buffers - —ç—Ç–æ —è–∑—ã–∫ –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.",
            "Protocol Buffers (protobuf) - —ç—Ç–æ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π –æ—Ç —è–∑—ã–∫–∞ –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –º–µ—Ö–∞–Ω–∏–∑–º —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –û–Ω –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π —á–µ–º JSON –∏–ª–∏ XML.",
            "syntax = \"proto3\";\n\nmessage User {\n  int32 id = 1;\n  string name = 2;\n  string email = 3;\n  repeated string roles = 4;\n}"
        );
    }

    private void createQuestion(Subtopic subtopic, String question, String quickAnswer, String detailedAnswer, String codeExample) {
        Question q = new Question();
        q.setQuestion(question);
        q.setQuickAnswer(quickAnswer);
        q.setDetailedAnswer(detailedAnswer);
        q.setCodeExample(codeExample);
        q.setSubtopic(subtopic);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —Å–æ–∑–¥–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        List<User> users = authService.getAllUsers();
        if (!users.isEmpty()) {
            q.setCreatedBy(users.get(0));
        }
        
        questionRepository.save(q);
    }
} 